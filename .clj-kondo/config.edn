{:lint-as
 {clojars.remote-service/defendpoint    clojure.core/defn
  clojure.java.jdbc/with-db-transaction clojure.core/let
  next.jdbc.types/as-other              clojure.core/constantly}

 :linters
 {
  ;; warn when we'll never reach an else
  :condition-always-true {:level :warning}

  :consistent-alias
  {:aliases {clojure.string str

             honey.sql hsql

             next.jdbc            jdbc
             next.jdbc.prepare    jdbc.prepare
             next.jdbc.result-set jdbc.result-set
             next.jdbc.sql        sql
             next.jdbc.types      jdbc.types}}

  ;; TODO https://github.com/clojars/clojars-web/issues/904
  :deprecated-var {:exclude {buddy.core.codecs.base64/decode {:namespaces [clojars.routes.token-breach]}
                             buddy.core.codecs.base64/encode {:namespaces [clojars.web.user
                                                                           clojars.unit.web.token-breach-test
                                                                           clojars.integration.uploads-test]}}}

  :equals-expected-position {:level :warning}

  ;; use false?/true? instead of = false/true
  :equals-false {:level :warning}
  :equals-true  {:level :warning}

  :redundant-str-call {:level :warning}

  ;; warn if assoc-in/get-in/update-in are used with a single key
  :single-key-in {:level :warning}

  :unresolved-symbol
  {:exclude [(clojure.test/is [match?])]}

  :unresolved-var
  {:exclude [digest/md5
             digest/sha-1
             next.jdbc.types/as-other]}}}
